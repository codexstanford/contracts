%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% basics
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

claim.recommendation(Claim, pay) :-
  plan_in_effect(Claim) &
  covered(Claim, Reason) &
  ~excluded(Claim)

excluded(C) :-
  exclusion(C, E)

plan_in_effect(C) :-
  claim.policy(C,P) &
  claim.hospitalization(C,Z) &
  policy.startdate(P,PS) &
  policy.enddate(P,PE) &
  hospitalization.startdate(Z,ZS) &
  hospitalization.enddate(Z,ZE) &
  overlap(PS,PE,ZS,ZE)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% benefits
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

covered(Situation) :-
  "Situation.event"(Situation, hospitalization)

covered(Claim, confinement) :-
  claim.hospitalization(Claim, Hosp) &
  hospitalization.facility(Hosp, hospital)

% TODO think more about limits
%  claim.policy(C, P) &
%  policy.payouts_ytd(P, PayoutsYtd) &
%  evaluate(minus(27000, PayoutsYtd), BenefitBankRemaining) &
%  evaluate(min(BenefitBankRemaining, 900), Amount)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% exclusions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type(exclusion_payout, "InsurancePayout")
"InsurancePayout.payoutType"(exclusion_payout, exclusion)

type(hosp_pattern, "Situation")
"Situation.event"(hosp_pattern, hospitalization)

% Care provided outside USA and Canada
coverage(History, exclusion_payout) :-
  risk_chain_matches([risk_chain.wildcard, hosp_pattern], History) &
  % how do we get Hospitalization?
  ~"Situation.location"(Hospitalization, canada) &
  ~"Situation.location"(Hospitalization, usa)

% Care for pre-existing condition in first 6 months of coverage
% TODO exact language: "Care or treatment caused by a Pre-Existing Condition will not be covered
% unless it begins more than 6 months after the Policy Effective Date."
% So... beginning of *treatment* might be different from beginning of *hospitalization*. Does that
% matter? What exactly does it mean for "treatment" to "begin"? If I'm prescribed medication for a
% PEC 5 months into my policy and hospitalized for it 7 months in, is the hospitalization covered?
exclusion(C, preexist) :-
  claim.hospitalization(C, Z) &
  hospitalization.cause(Z, preexist) &
  claim.policy(C, P) &
  policy.startdate(P, PS) &
  parsedate(PS, StartDate) &
  hospitalization.startdate(Z, ZS) &
  parsedate(ZS, HospDate) &
  months_since(StartDate, HospDate, Months) &
  less(Months, 6)

% Always excluded causes

coverage([Cause, Hospitalization], exclusion_payout) :-
  type(Hospitalization, "Situation") &
  "Situation.event"(Hospitalization, "hospitalization") &
  type(Cause, "Situation") &
  "Situation.event"(Cause, Event) &
  excluded_cause(Event)

excluded_cause(aircraft_operation)
excluded_cause(hang_gliding)
excluded_cause(hot_air_ballooning)
excluded_cause(bungee_jumping)
excluded_cause(parachuting)
excluded_cause(scuba_diving)
excluded_cause(sail_gliding)
excluded_cause(parasailing)
excluded_cause(pregnancy_routine)
excluded_cause(racing)
excluded_cause(stunt_driving)
excluded_cause(speed_testing)
excluded_cause(professional_athletics)
excluded_cause(war) % TODO there are some subtleties here
excluded_cause(felony)
excluded_cause(cosmetic)
excluded_cause(elective) % TODO compare to surgery_not_necessary from Aflac
excluded_cause(suicide_attempt)
excluded_cause(self_inflicted)
excluded_cause(drugs) % TODO subtleties. compare to Aflac
excluded_cause(mental)
excluded_cause(addiction)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% utilities
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% TODO ask PD. For now just check the event is the same
situation_matches(Pattern, Instance) :-
  "Situation.event"(Pattern, Event) &
  "Situation.event"(Instance, Event)

% Risk chain matching

% Empty chains match
risk_chain_matches([], [])

% Matching concrete head situations
risk_chain_matches(PatternHead!PatternTail, InstanceHead!InstanceTail) :-
  situation_matches(PatternHead, InstanceHead) &
  risk_chain_matches(PatternTail, InstanceTail)

% A pattern starting with a wildcard matches any instance that has some suffix
% matching the post-wildcard pattern.
risk_chain_matches(risk_chain.wildcard!PatternTail, Instance) :-
  risk_chain_matches(PatternTail, Instance)
risk_chain_matches(risk_chain.wildcard!PatternTail, _!InstanceTail) :-
  risk_chain_matches(risk_chain.wildcard!PatternTail, InstanceTail)
