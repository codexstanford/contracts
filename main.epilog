%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Semantic Rules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% basics
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

claim.recommendation(Claim, pay) :-
  plan_in_effect(Claim) &
  covered(Claim, Reason) &
  ~excluded(Claim)

excluded(C) :-
  exclusion(C, E)

plan_in_effect(C) :-
  claim.policy(C,P) &
  claim.hospitalization(C,Z) &
  policy.startdate(P,PS) &
  policy.enddate(P,PE) &
  hospitalization.startdate(Z,ZS) &
  hospitalization.enddate(Z,ZE) &
  overlap(PS,PE,ZS,ZE)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% coverage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

covered(C, confinement) :-
  claim.hospitalization(Claim, Hosp) &
  hospitalization.facility(Hosp, hospital) &
  hospitalization.cause(Hosp, Cause) &
  cause.covered(Cause) &
  duration(Hosp, Duration) &
  greater(Duration, 82800000)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% exclusions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

exclusion(C, 2_a_1) :- claim.exclusion(C, preexist)
exclusion(C, 2_b) :- claim.exclusion(C, sanctions)
exclusion(C, 2_c) :- claim.exclusion(C, fraud)

% Section D: Excluded causes

exclusion(C, Section) :-
  claim.hospitalization(C, Z) &
  excluded_cause(Z, Section)

excluded_cause(Z, 2_d_2) :-
  hospitalization.cause(Z, routine_newborn)
excluded_cause(Z, 2_d_3) :-
  hospitalization.cause(Z, drugs)
excluded_cause(Z, 2_d_4) :-
  hospitalization.cause(Z, felony)
excluded_cause(Z, 2_d_5) :-
  hospitalization.cause(Z, intoxicated)
excluded_cause(Z, 2_d_6) :-
  hospitalization.cause(Z, self_inflicted)
excluded_cause(Z, 2_d_7) :-
  hospitalization.cause(Z, dental_non_accident)
excluded_cause(Z, 2_d_8) :-
  hospitalization.cause(Z, surgery_not_necessary)
excluded_cause(Z, 2_d_9) :-
  hospitalization.cause(Z, war)
excluded_cause(Z, 2_d_11) :-
  hospitalization.cause(Z, mental) &
  ~hospitalization.cause(Z, senility)

% Routine pregnancy/newborn care in the first 10 months of coverage
exclusion(C, 2_d_1) :-
  claim.hospitalization(C,Z) &
  hospitalization.cause(Z, natal) &
  ~hospitalization.cause(Z, pregnancy_complication) &
  claim.policy(C,P) &
  policy.startdate(P,PS) &
  parsedate(PS, StartDate) &
  hospitalization.startdate(Z,ZS) &
  parsedate(ZS, HospDate) &
  months_since(StartDate, HospDate, Months) &
  less(Months, 10)

% Organ donation in the first year of coverage
exclusion(C, 2_d_10) :-
  claim.hospitalization(C,Z) &
  hospitalization.cause(Z, organ_donation) &
  claim.policy(C,P) &
  policy.startdate(P,PS) &
  parsedate(PS, StartDate) &
  hospitalization.startdate(Z,ZS) &
  parsedate(ZS, HospDate) &
  months_since(StartDate, HospDate, Months) &
  less(Months, 12)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% insurance-related definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

person.policy(X,Y) :- policy.insuree(Y,X)
person.policy(X,Y) :- policy.dependent(Y,X)

person.claim(X,Y) :-
  hospitalization.patient(H,X) &
  claim.hospitalization(Y,H)

policy.claim(X,Y) :- claim.policy(Y,X)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% general definitions and predefined relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

duration(Z,DURATION) :-
  hospitalization.startdate(Z,SD) &
  hospitalization.starttime(Z,ST) &
  hospitalization.enddate(Z,ED) &
  hospitalization.endtime(Z,ET) &
  datetimetotimestamp(SD,ST,SS) &
  datetimetotimestamp(ED,ET,ES) &
  evaluate(minus(ES,SS),DURATION)

overlap(PS,PE,ZS,ZE) :-
  evaluate(stringmin(ZS,PE),ZS) &
  evaluate(stringmin(PS,ZE),PS)

datetimetotimestamp(DATE,TIME,STAMP) :-
  evaluate(parsedate(DATE),[Y,M,D]) &
  evaluate(parsetime(TIME),[H,N,S]) &
  evaluate(maketimestamp(Y,M,D,H,N,S),STAMP)

parsedate(DATE) :=
  map(readstring,tail(matches(stringify(DATE),"(....)_(..)_(..)")))

parsetime(TIME) :=
  map(readstring,tail(matches(stringify(TIME),"(..)_(..)_(..)")))

% `Months` is the number of complete months that have passed between two dates. 
months_since([SinceYear, SinceMonth, SinceDay], [TargetYear, TargetMonth, TargetDay], Months) :-
  evaluate(minus(TargetYear, SinceYear), YearDifference) &
  evaluate(minus(TargetMonth, SinceMonth), MonthDifference) &
  evaluate(minus(TargetDay, SinceDay), DayDifference) &
  day_modifier(DayDifference, DayModifier) &
  evaluate(plus(times(YearDifference, 12), MonthDifference, DayModifier), Months)

% n.b. I assume a complete month has not passed until the *end* of the
% same-numbered day the next month. This is going to vary across jurisdictions
day_modifier(DayDifference, 0) :-
  evaluate(min(DayDifference, 1), 1)
day_modifier(DayDifference, -1) :-
  evaluate(max(DayDifference, 0), 0)

greater(X,Y) :- evaluate(min(X,Y),Y) & distinct(X,Y)
less(X,Y) :- evaluate(min(X,Y),X) & distinct(X,Y)

head(X!L) := X
tail(X!L) := L

%%% number relations, e.g. less, greater
%%% string relations, e.g. stringappend
%%% date relations, e.g. dateplus
%%% and so forth...

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
